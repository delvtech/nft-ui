/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Minter, MinterInterface } from "../Minter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "deauthorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "elfNFT",
    outputs: [
      {
        internalType: "contract ElfNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    name: "setRewardsRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a26380380610a2683398101604081905261002f9161005e565b60008054336001600160a01b031990911617905560609190911b6001600160601b031916608052600255610096565b60008060408385031215610070578182fd5b82516001600160a01b0381168114610086578283fd5b6020939093015192949293505050565b60805160601c61096c6100ba6000396000818160dd0152610587015261096c6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b6a5d7de11610076578063ba41b0c61161005b578063ba41b0c6146101b9578063d697a1a9146101cc578063fe9fbb80146101df576100be565b8063b6a5d7de14610173578063b918161114610186576100be565b806327c97fa5116100a757806327c97fa5146101295780632eb4a7ab1461013c5780638da5cb5b14610153576100be565b806313af4035146100c357806320c590bc146100d8575b600080fd5b6100d66100d136600461076c565b610218565b005b6100ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d661013736600461076c565b6102e5565b61014560025481565b604051908152602001610120565b6000546100ff9073ffffffffffffffffffffffffffffffffffffffff1681565b6100d661018136600461076c565b6103b2565b6101a961019436600461076c565b60016020526000908152604090205460ff1681565b6040519015158152602001610120565b6100d66101c73660046107bf565b61048c565b6100d66101da3660046107a7565b6105fd565b6101a96101ed36600461076c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610295565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610295565b6104898173ffffffffffffffffffffffffffffffffffffffff16600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b50565b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166020820152603481018390526000906054016040516020818303038152906040528051906020012090506104ec8260025483610683565b610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642050726f6f66000000000000000000000000000000000000006044820152606401610295565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461067e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610295565b600255565b6000826106908584610699565b14949350505050565b600081815b84518110156107645760008582815181106106e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050808311610724576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610751565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061075c816108a9565b91505061069e565b509392505050565b60006020828403121561077d578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107a0578182fd5b9392505050565b6000602082840312156107b8578081fd5b5035919050565b600080604083850312156107d1578081fd5b8235915060208084013567ffffffffffffffff808211156107f0578384fd5b818601915086601f830112610803578384fd5b81358181111561081557610815610907565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561085857610858610907565b604052828152858101935084860182860187018b1015610876578788fd5b8795505b8386101561089857803585526001959095019493860193860161087a565b508096505050505050509250929050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610900577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212208d8659cf053c45a32546b771340956628ca25093988006c634b5953937980a8464736f6c63430008030033";

type MinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Minter__factory extends ContractFactory {
  constructor(...args: MinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Minter";
  }

  deploy(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Minter> {
    return super.deploy(
      _token,
      _merkleRoot,
      overrides || {}
    ) as Promise<Minter>;
  }
  getDeployTransaction(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _merkleRoot, overrides || {});
  }
  attach(address: string): Minter {
    return super.attach(address) as Minter;
  }
  connect(signer: Signer): Minter__factory {
    return super.connect(signer) as Minter__factory;
  }
  static readonly contractName: "Minter";
  public readonly contractName: "Minter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterInterface {
    return new utils.Interface(_abi) as MinterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Minter {
    return new Contract(address, _abi, signerOrProvider) as Minter;
  }
}
